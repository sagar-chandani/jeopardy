{"version":3,"sources":["components/Search.js","components/search_results.js","components/routes.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","browserHistory","push","react_default","a","createElement","onSubmit","type","onChange","Component","url","SearchResults","query","params","post","qcSpinner","domainUrl","axios","then","response","posts","data","map","console","log","Question","catch","error","search_results_ProductList","key","style","display","justifyContent","react_spinners","color","loading","handleQcSpinner","ProductList","_this2","_this$props$data","Answer","padding","dist","flipOnHover","flipOnClick","flipDirection","ref","r","flippy","width","height","backgroundColor","React","Routes","es","history","path","component","App","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bc8bfab2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport { browserHistory } from 'react-router'\n\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleChange(event) {\n        this.setState({value: event.target.value});\n      }\n    \n      handleSubmit(event) {\n        browserHistory.push(\"/search/\" + this.state.value)\n      }\n    \n      render() {\n        return (\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Name:\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        );\n      }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport axios from 'axios';\nimport { RingLoader, HashLoader, PacmanLoader, FadeLoader, PulseLoader, ScaleLoader } from 'react-spinners';\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\n\n\nvar domainUrl = 'http://127.0.0.1:5000';\nvar token = '';\nvar url = '';\n\n\nclass SearchResults extends Component {\n\n\n    constructor(props) {\n        super(props);\n    \n        /**\n         * Declaring Default states of the tools.\n         */\n    \n         this.state = {\n           query: this.props.params.query,\n           post: [],\n           qcSpinner: true,\n       };\n    }\ncomponentWillMount() {\n    if(this.state.query) {\n        var _this = this;\n        url = domainUrl + '/search?query=' + this.state.query\n        return axios.post(url)\n          .then(function (response) {\n            _this.setState({\n                posts: response.data\n              });\n            response.data.map(data =>\n            console.log(data.Question));     \n            console.log(response);\n            _this.setState({\n               qcSpinner : false\n              })\n              console.log(\"state spinner :\",this.state.qcSpinner)\n            })\n          .catch(error => error.response)\n          \n      }\n    }\n\n    renderAlbums() {\n        return this.state.posts.map(data =>\n          <ProductList key={data.Question} data={data} />);\n    }\n  \n    handleQcSpinner(){\n        if(this.state.qcSpinner){\n          return(\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <ScaleLoader\n            color={'#0e364b'} \n            loading={this.state.qcSpinner} \n            />\n            </div>\n          );\n        }else{\n          return ( <div>\n              hello\n            {this.state.posts.map(data => \n            <div>\n            {/*<li>{data.Question}</li>*/}\n            <ProductList data={data} />\n            </div>)}\n            </div>\n        );\n        }\n      }\n  \n        \n\n  render() {\n    // if (this.state.posts.length) {\n    //     let renderItems = this.state.posts.map(function(item, i) {\n    //       return <li key={i}>{item}</li>\n    //     });\n    // }\n    return (\n\n        \n        //       <div className=\"App\">\n        //         <header className=\"App-header\">\n        //         <form>\n        //   <label>\n        // {this.state.query}\n        //     <input type=\"text\" name=\"name\" />\n        //   </label>\n        //   <input type=\"submit\" value=\"Search\" />\n        // </form>\n        //         </header>\n        //       </div>\n        <div>{this.handleQcSpinner()}</div>\n        \n    );\n  }\n}\n\nexport default SearchResults;\n\n\n// Products Starts\nclass ProductList extends React.Component {\n\n   \n    render() {\n        const { Question, Answer } = this.props.data;\n\n  return (\n      <div style={{display: 'flex', justifyContent: 'center', padding:'10px'}}>\n    {/*<li>{Question} : {Answer}</li>*/}\n    <Flippy\n    flipOnHover={false} // default false\n    flipOnClick={true} // default false\n    flipDirection=\"vertical\" // horizontal or vertical\n    ref={(r) => this.flippy = r} // to use toggle method like this.flippy.toggle()\n    // if you pass isFlipped prop component will be controlled component.\n    // and other props, which will go to div\n    style={{ width: '200px', height: '200px' }} /// these are optional style, it is not necessary\n  >\n    <FrontSide\n      style={{\n        backgroundColor: '#41669d',\n      }}\n    >\n      {Question}\n    </FrontSide>\n    <BackSide\n      style={{ backgroundColor: '#175852'}}>\n      {Answer}\n    </BackSide>\n  </Flippy>\n  </div>\n  )\n}\n}\n// Products Ends","import React from 'react'\nimport { Router, Route, browserHistory } from 'react-router'\n\n\nimport Search from './Search'\nimport SearchResults from './search_results'\n\nconst Routes = () => {\n  return (\n    <Router history={browserHistory}>\n      <Route path='/' component={Search} />\n      <Route path='/search/:query' component={SearchResults} />\n    </Router>\n  )\n}\nexport default Routes\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Search from './components/Search';\nimport Routing from './components/routes'\n\nclass App extends Component {\n  render() {\n    return (\n      <Routing />\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}